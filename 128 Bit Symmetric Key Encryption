# Import necessary modules from the Crypto library
# INSTALL VIA 'pip3 install pycryptodome'  

from Crypto.Cipher import AES
from Crypto.Random import get_random_bytes

# Function to encrypt a message using AES encryption
def encrypt_message(data, key):
    # Create a new AES cipher object in EAX mode
    cipher = AES.new(key, AES.MODE_EAX)
    # Encrypt the data and get the tag for authentication
    ciphertext, tag = cipher.encrypt_and_digest(data)
    # Get the nonce used in encryption
    nonce = cipher.nonce
    # Combine nonce, tag, and ciphertext to form the stored text
    stored_text = nonce + tag + ciphertext
    # Return the stored text
    return stored_text

# Function to decrypt a message using AES decryption
def decrypt_message(stored_text, key):
    # Extract nonce, tag, and ciphertext from the stored text
    nonce = stored_text[:16]
    tag = stored_text[16:32]
    ciphertext = stored_text[32:]
    # Create a new AES cipher object for decryption using the provided nonce
    cipher = AES.new(key, AES.MODE_EAX, nonce)
    # Decrypt the ciphertext and verify the authenticity using the tag
    decrypted_data = cipher.decrypt_and_verify(ciphertext, tag)
    # Return the decrypted data
    return decrypted_data

# Function to read an encryption key from a file
def read_key_from_file(filename):
    try:
        # Attempt to open the file in binary mode and read the key
        with open(filename, 'rb') as file:
            key = file.read()
        # Return the read key
        return key
    except FileNotFoundError:
        # Handle the case when the file does not exist
        print("File does not exist.")
        # Return None to indicate failure
        return None

# Save the encryption key to 'key.txt'
with open('key.txt', 'wb') as key_file:
    key_file.write(get_random_bytes(16))
# Read the encryption key from 'key.txt'
key = read_key_from_file('key.txt')

# Check if the key is successfully obtained
if key is not None:
    # Define the data to be encrypted
    data = b'Unsecured Message'
    # Encrypt the message using the obtained key
    stored_text = encrypt_message(data, key)
   
    # Print the original and encrypted messages
    print('Original Message:', data)
    print("Encrypted Message:", stored_text)
    # User attempts to decrypt the message
    user_filename = input("Enter the name of the text file containing the key: ")
    # Read the user's key from the specified file
    user_key = read_key_from_file(user_filename)

    # Check if the user's key is successfully obtained
    if user_key is not None:
        # Check if the user's key matches the original key
        if user_key == key:
            # Decrypt the stored text using the user's key
            decrypted_data = decrypt_message(stored_text, user_key)
            # Print the decrypted message
            print("Decrypted Message:", decrypted_data.decode('utf-8'))
        else:
            # Print an error message for invalid key
            print("Invalid key. Decryption failed.")
